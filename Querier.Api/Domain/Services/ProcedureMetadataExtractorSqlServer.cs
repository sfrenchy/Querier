

using Microsoft.Data.SqlClient;
using System.Data;
using System;
using System.Data.Common;
using Querier.Api.Infrastructure.Database.Templates;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using Microsoft.EntityFrameworkCore.Scaffolding.Metadata;

namespace Querier.Api.Domain.Services
{
    public class ProcedureMetadataExtractorSqlServer : ProcedureMetadataExtractorBase
    {
        private readonly SqlConnection _connection;
        public ProcedureMetadataExtractorSqlServer(string connectionString, DatabaseModel dbModel)
            : base(dbModel)
        {
            ConnectionString = connectionString;
            _connection = new SqlConnection(connectionString);
            _connection.Open();
            ExtractMetadata();
        }
        protected override string GetProcedureWithParametersQuery => @"
        SELECT 
            r.ROUTINE_SCHEMA AS SchemaName,
            r.ROUTINE_NAME AS ProcedureName,
            p.name AS ParameterName,
            TYPE_NAME(p.user_type_id) AS DataType,
            p.max_length AS Length,
            CASE 
                WHEN TYPE_NAME(p.system_type_id) = 'uniqueidentifier' THEN p.precision  
                ELSE OdbcPrec(p.system_type_id, p.max_length, p.precision) 
            END AS Precision,
            OdbcScale(p.system_type_id, p.scale) AS Scale,
            p.parameter_id AS ParameterOrder,
            CONVERT(SYSNAME, 
                CASE 
                    WHEN p.system_type_id IN (35, 99, 167, 175, 231, 239)  
                    THEN SERVERPROPERTY('collation') 
                END
            ) AS Collation,
            CAST(p.is_output AS INT) AS IsOutput,
            CAST(p.is_nullable AS INT) AS IsNullable
        FROM INFORMATION_SCHEMA.ROUTINES r
        LEFT JOIN sys.parameters p 
            ON p.object_id = OBJECT_ID(r.ROUTINE_SCHEMA + '.' + r.ROUTINE_NAME)
        WHERE r.ROUTINE_TYPE = 'PROCEDURE' 
          AND LEFT(r.ROUTINE_NAME, 3) NOT IN ('sp_', 'xp_', 'ms_')
        ORDER BY r.ROUTINE_SCHEMA, r.ROUTINE_NAME, p.parameter_id;
        ";

        protected override DbConnection Connection => _connection;

        protected override void ExtractProcedureOutputMetadata()
        {
            List<TemplateProperty> result = [];
            int procedureIndex = 0;
            List<int> procedureToRemoveIndexes = [];
            foreach (var procedure in _procedureMetadata)
            {
                try
                {
                    using var getProcedureOutput = new SqlCommand("sp_describe_first_result_set", _connection);
                    getProcedureOutput.CommandType = CommandType.StoredProcedure;
                    getProcedureOutput.Parameters.AddWithValue("@tsql", $"EXEC [{procedure.Schema}].[{procedure.Name}]");

                    using var da = new SqlDataAdapter(getProcedureOutput);
                    var dt = new DataTable();
                    da.Fill(dt);

                    foreach (DataRow row in dt.Rows)
                    {
                        var outputSet = new TemplateProperty()
                        {
                            Name = (string)row["name"],
                            CSName = NormalizeCsString((string)row["name"]),
                            IsKey = false,
                            IsForeignKey = false,
                            IsRequired = true,
                            IsAutoGenerated = false,
                            CSType = GetCSharpType((string)row["system_type_name"])
                        };
                        procedure.OutputSet.Add(outputSet);
                    }
                }
                catch (Exception ex)
                {
                    if (!TryAIOutputMetadataExtraction(procedure, result))
                    {
                        procedureToRemoveIndexes.Add(procedureIndex);
                    }
                }
                procedureIndex++;
            }

            foreach (var index in procedureToRemoveIndexes)
            {
                _procedureMetadata[index] = null;
            }

            _procedureMetadata.RemoveAll(p => p == null);
        }

        protected override string GetStoredProcedureSqlCreate(string procedureName, string schema)
        {
            SqlCommand command = new SqlCommand($"EXEC sp_helptext '{procedureName}'", _connection);
            using var reader = command.ExecuteReader();
            string procedureText = "";
            while (reader.Read())
            {
                procedureText += reader.GetString(0);
            }
            return procedureText;
        }

        protected override string GetCSharpType(string sqlType)
        {
            if (sqlType.IndexOf("(", StringComparison.Ordinal) != -1)
            {
                sqlType = sqlType.Substring(0, sqlType.IndexOf("(", StringComparison.Ordinal));
            }
            return sqlType.ToLower() switch
            {
                "bigint" => "long",
                "binary" or "varbinary" => "byte[]",
                "bit" => "bool",
                "char" or "nchar" => "string",
                "date" or "datetime" or "datetime2" or "smalldatetime" => "DateTime",
                "datetimeoffset" => "DateTimeOffset",
                "decimal" or "numeric" or "money" or "smallmoney" => "decimal",
                "float" => "double",
                "image" => "byte[]",
                "int" => "int",
                "real" => "float",
                "text" or "ntext" or "varchar" or "nvarchar" => "string",
                "time" => "TimeSpan",
                "tinyint" => "byte",
                "uniqueidentifier" => "Guid",
                "xml" => "string",
                "smallint" => "short",
                _ => "unknown",
            };
        }
    }
}
