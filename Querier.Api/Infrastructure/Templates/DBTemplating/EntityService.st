using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using $nameSpace$.DTOs;
using Querier.Api.Domain.Common.Attributes;
using Querier.Api.Application.Interfaces.Infrastructure;
using Querier.Api.Domain.Common.Models;

namespace $nameSpace$.Services
{
    $entityList: {entity|
    #region $entity.Name$
    public interface I$entity.Name$Service : IDynamicContextEntityService
    {
        Task<PagedResult<$entity.Name$Dto>> GetAllAsync(PaginationParameters? parameters = null);
        Task<$entity.Name$Dto?> GetByIdAsync($entity.KeyType$ id);
        Task<$entity.Name$Dto> CreateAsync(Create$entity.Name$Dto createDto);
        Task<$entity.Name$Dto?> UpdateAsync($entity.KeyType$ id, Update$entity.Name$Dto updateDto);
        Task<bool> DeleteAsync($entity.KeyType$ id);
    \}

    [DynamicContextEntity(ContextName="$nameSpace$", ServiceName="I$entity.Name$Service")]
    public class $entity.Name$Service : I$entity.Name$Service
    {
        private readonly IDbContextFactory<$contextNameSpace$> _contextFactory;
        private readonly ILogger<$entity.Name$Service> _logger;

        public $entity.Name$Service(
            IDbContextFactory<$contextNameSpace$> contextFactory,
            ILogger<$entity.Name$Service> logger)
        {
            _contextFactory = contextFactory;
            _logger = logger;
        \}

        private static $entity.Name$Dto MapToDto($entity.Name$ entity)
        {
            return new $entity.Name$Dto
            {
                $entity.Properties: {property|
                $property.Name$ = entity.$property.Name$,
                }$
            \};
        \}

        private static void MapToEntity(Create$entity.Name$Dto dto, $entity.Name$ entity)
        {
            $entity.Properties: {property|
            $if(!property.IsAutoGenerated)$
            entity.$property.Name$ = dto.$property.Name$;
            $endif$
            }$
        \}

        private static void UpdateEntity(Update$entity.Name$Dto dto, $entity.Name$ entity)
        {
            $entity.Properties: {property|
            $if(!property.IsKey)$
            if (dto.$property.Name$ != null)
                entity.$property.Name$ = dto.$property.Name$;
            $endif$
            }$
        \}

        public async Task<PagedResult<$entity.Name$Dto>> GetAllAsync(PaginationParameters? parameters = null)
        {
            using var context = await _contextFactory.CreateDbContextAsync();
            var query = context.$entity.PluralName$.AsQueryable();
            
            var total = await query.CountAsync();
            
            if (parameters != null)
            {
                var skip = (parameters.PageNumber - 1) * parameters.PageSize;
                query = query.Skip(skip).Take(parameters.PageSize);
            \}
                
            var items = await query.ToListAsync();
            return new PagedResult<$entity.Name$Dto>(items.Select(MapToDto), total);
        \}

        public async Task<$entity.Name$Dto?> GetByIdAsync($entity.KeyType$ id)
        {
            using var context = await _contextFactory.CreateDbContextAsync();
            var entity = await context.$entity.PluralName$.FindAsync(id);
            return entity != null ? MapToDto(entity) : null;
        \}

        public async Task<$entity.Name$Dto> CreateAsync(Create$entity.Name$Dto createDto)
        {
            using var context = await _contextFactory.CreateDbContextAsync();
            var entity = new $entity.Name$();
            MapToEntity(createDto, entity);
            
            context.$entity.PluralName$.Add(entity);
            await context.SaveChangesAsync();
            
            return MapToDto(entity);
        \}

        public async Task<$entity.Name$Dto?> UpdateAsync($entity.KeyType$ id, Update$entity.Name$Dto updateDto)
        {
            using var context = await _contextFactory.CreateDbContextAsync();
            var entity = await context.$entity.PluralName$.FindAsync(id);
            
            if (entity == null)
                return null;

            UpdateEntity(updateDto, entity);
            await context.SaveChangesAsync();
            
            return MapToDto(entity);
        \}

        public async Task<bool> DeleteAsync($entity.KeyType$ id)
        {
            using var context = await _contextFactory.CreateDbContextAsync();
            var entity = await context.$entity.PluralName$.FindAsync(id);
            
            if (entity == null)
                return false;

            context.$entity.PluralName$.Remove(entity);
            await context.SaveChangesAsync();
            
            return true;
        \}
    \}
    #endregion
    }$
\} 