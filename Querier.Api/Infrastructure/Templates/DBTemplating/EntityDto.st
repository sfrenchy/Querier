using System;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using Querier.Api.Domain.Common.Attributes;

namespace $nameSpace$.DTOs
{
    $entityList: {entity|
    /// <summary>
    /// DTO for retrieving $entity.Name$ data
    /// </summary>
    [DtoFor(Action = "GET", EntityType = "$nameSpace$.$entity.Name$")]
    public class $entity.Name$Dto
    {
        $entity.Properties: {property|
        /// <summary>
        /// Gets or sets the $property.Name$ of the $entity.Name$
        /// </summary>
        $if(property.Description)$/// <remarks>$property.Description$</remarks>$endif$
        [JsonPropertyName("$property.Name$")]
        [JsonProperty("$property.Name$", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Include)]
        $if(property.IsKey)$[Key]$endif$
        $if(property.IsRequired)$[Required(ErrorMessage = "The $property.Name$ field is required.")]$endif$
        $if(property.MaxLength)$[MaxLength($property.MaxLength$, ErrorMessage = "The $property.Name$ field cannot exceed $property.MaxLength$ characters.")]$endif$
        $if(property.MinLength)$[MinLength($property.MinLength$, ErrorMessage = "The $property.Name$ field must be at least $property.MinLength$ characters.")]$endif$
        $if(property.RegexPattern)$[RegularExpression(@"$property.RegexPattern$", ErrorMessage = "The $property.Name$ field format is invalid.")]$endif$
        $if(property.Range)$[Range($property.Range.Min$, $property.Range.Max$, ErrorMessage = "The $property.Name$ field must be between $property.Range.Min$ and $property.Range.Max$.")]$endif$
        public $property.CSType$ $property.Name$ { get; set; \}
        }$
    \}

    /// <summary>
    /// DTO for creating a new $entity.Name$
    /// </summary>
    [DtoFor(Action = "CREATE", EntityType = "$nameSpace$.$entity.Name$")]
    public class Create$entity.Name$Dto
    {
        $entity.Properties: {property|
        $if(!property.IsAutoGenerated)$
        /// <summary>
        /// Gets or sets the $property.Name$ of the new $entity.Name$
        /// </summary>
        $if(property.Description)$/// <remarks>$property.Description$</remarks>$endif$
        [JsonPropertyName("$property.Name$")]
        [JsonProperty("$property.Name$", Required = $if(property.IsRequired)$Required.Always$else$Required.AllowNull$endif$, NullValueHandling = NullValueHandling.Include)]
        $if(property.IsRequired)$[Required(ErrorMessage = "The $property.Name$ field is required.")]$endif$
        $if(property.MaxLength)$[MaxLength($property.MaxLength$, ErrorMessage = "The $property.Name$ field cannot exceed $property.MaxLength$ characters.")]$endif$
        $if(property.MinLength)$[MinLength($property.MinLength$, ErrorMessage = "The $property.Name$ field must be at least $property.MinLength$ characters.")]$endif$
        $if(property.RegexPattern)$[RegularExpression(@"$property.RegexPattern$", ErrorMessage = "The $property.Name$ field format is invalid.")]$endif$
        $if(property.Range)$[Range($property.Range.Min$, $property.Range.Max$, ErrorMessage = "The $property.Name$ field must be between $property.Range.Min$ and $property.Range.Max$.")]$endif$
        public $property.CSType$ $property.Name$ { get; set; \}
        $endif$
        }$
    \}

    /// <summary>
    /// DTO for updating an existing $entity.Name$
    /// </summary>
    [DtoFor(Action = "UPDATE", EntityType = "$nameSpace$.$entity.Name$")]
    public class Update$entity.Name$Dto
    {
        $entity.Properties: {property|
        $if(!property.IsKey)$
        /// <summary>
        /// Gets or sets the $property.Name$ of the $entity.Name$ to update
        /// </summary>
        $if(property.Description)$/// <remarks>$property.Description$</remarks>$endif$
        [JsonPropertyName("$property.Name$")]
        [JsonProperty("$property.Name$", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Include)]
        $if(property.MaxLength)$[MaxLength($property.MaxLength$, ErrorMessage = "The $property.Name$ field cannot exceed $property.MaxLength$ characters.")]$endif$
        $if(property.MinLength)$[MinLength($property.MinLength$, ErrorMessage = "The $property.Name$ field must be at least $property.MinLength$ characters.")]$endif$
        $if(property.RegexPattern)$[RegularExpression(@"$property.RegexPattern$", ErrorMessage = "The $property.Name$ field format is invalid.")]$endif$
        $if(property.Range)$[Range($property.Range.Min$, $property.Range.Max$, ErrorMessage = "The $property.Name$ field must be between $property.Range.Min$ and $property.Range.Max$.")]$endif$
        public $property.CSType$ $property.Name$ { get; set; \}
        $endif$
        }$
    \}
    }$
\} 