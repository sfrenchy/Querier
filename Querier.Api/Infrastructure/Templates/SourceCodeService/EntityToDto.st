using System;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using Querier.Api.Domain.Common.Attributes;
using $model.RootNamespace$.Entities;

namespace $model.RootNamespace$.Dtos;

/// <summary>
/// DTO for retrieving $model.Entity.Name$ data
/// </summary>
[DtoFor(Action = "GET", EntityType = typeof($model.RootNamespace$.Entities.$model.Entity.Name$))]
public class Get$model.Entity.Name$Dto
{
    $model.Entity.Properties: {property|
    /// <summary>
    /// Gets or sets the $property.Name$ of the $model.Entity.Name$
    /// </summary>
    $if(property.Description)$/// <remarks>$property.Description$</remarks>$endif$
    [JsonPropertyName("$property.Name$")]
    [JsonProperty("$property.Name$", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Include)]
    $if(property.IsKey)$[Key]$endif$
    $if(property.IsRequired)$[Required(ErrorMessage = "The $property.Name$ field is required.")]$endif$
    $if(property.MaxLength)$[MaxLength($property.MaxLength$, ErrorMessage = "The $property.Name$ field cannot exceed $property.MaxLength$ characters.")]$endif$
    $if(property.MinLength)$[MinLength($property.MinLength$, ErrorMessage = "The $property.Name$ field must be at least $property.MinLength$ characters.")]$endif$
    $if(property.RegexPattern)$[RegularExpression(@"$property.RegexPattern$", ErrorMessage = "The $property.Name$ field format is invalid.")]$endif$
    $if(property.Range)$[Range($property.Range.Min$, $property.Range.Max$, ErrorMessage = "The $property.Name$ field must be between $property.Range.Min$ and $property.Range.Max$.")]$endif$
    public $property.CSType$ $property.Name$ { get; set; \}
    }$
        
    public string KeyIdsAsString()
    {
        List<string> keys = new List<string>();
        $model.Entity.Properties: {property|
            $if(property.IsKey)$
            keys.Add($property.Name$.ToString());
            $endif$
        }$
        return string.Join(",", keys);
    \}
\}

/// <summary>
/// DTO for creating a new $model.Entity.Name$
/// </summary>
[DtoFor(Action = "CREATE", EntityType = typeof($model.RootNamespace$.Entities.$model.Entity.Name$))]
public class Create$model.Entity.Name$Dto
{
    $model.Entity.Properties: {property|
    $if(!property.IsAutoGenerated)$
    /// <summary>
    /// Gets or sets the $property.Name$ of the new $model.Entity.Name$
    /// </summary>
    $if(property.Description)$/// <remarks>$property.Description$</remarks>$endif$
    [JsonPropertyName("$property.Name$")]
    [JsonProperty("$property.Name$", Required = $if(property.IsRequired)$Required.Always$else$Required.AllowNull$endif$, NullValueHandling = NullValueHandling.Include)]
    $if(property.IsRequired)$[Required(ErrorMessage = "The $property.Name$ field is required.")]$endif$
    $if(property.MaxLength)$[MaxLength($property.MaxLength$, ErrorMessage = "The $property.Name$ field cannot exceed $property.MaxLength$ characters.")]$endif$
    $if(property.MinLength)$[MinLength($property.MinLength$, ErrorMessage = "The $property.Name$ field must be at least $property.MinLength$ characters.")]$endif$
    $if(property.RegexPattern)$[RegularExpression(@"$property.RegexPattern$", ErrorMessage = "The $property.Name$ field format is invalid.")]$endif$
    $if(property.Range)$[Range($property.Range.Min$, $property.Range.Max$, ErrorMessage = "The $property.Name$ field must be between $property.Range.Min$ and $property.Range.Max$.")]$endif$
    public $property.CSType$ $property.Name$ { get; set; \}
    $endif$
    }$
\}

/// <summary>
/// DTO for updating an existing $model.Entity.Name$
/// </summary>
[DtoFor(Action = "UPDATE", EntityType = typeof($model.RootNamespace$.Entities.$model.Entity.Name$))]
public class Update$model.Entity.Name$Dto
{
    $model.Entity.Properties: {property|
    $if(!property.IsKey)$
    /// <summary>
    /// Gets or sets the $property.Name$ of the $model.Entity.Name$ to update
    /// </summary>
    $if(property.Description)$/// <remarks>$property.Description$</remarks>$endif$
    [JsonPropertyName("$property.Name$")]
    [JsonProperty("$property.Name$", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Include)]
    $if(property.MaxLength)$[MaxLength($property.MaxLength$, ErrorMessage = "The $property.Name$ field cannot exceed $property.MaxLength$ characters.")]$endif$
    $if(property.MinLength)$[MinLength($property.MinLength$, ErrorMessage = "The $property.Name$ field must be at least $property.MinLength$ characters.")]$endif$
    $if(property.RegexPattern)$[RegularExpression(@"$property.RegexPattern$", ErrorMessage = "The $property.Name$ field format is invalid.")]$endif$
    $if(property.Range)$[Range($property.Range.Min$, $property.Range.Max$, ErrorMessage = "The $property.Name$ field must be between $property.Range.Min$ and $property.Range.Max$.")]$endif$
    public $property.CSType$ $property.Name$ { get; set; \}
    $endif$
    }$
\}