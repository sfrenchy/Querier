using System;
using System.Collections.Generic;

namespace Querier.Api.Infrastructure.Database.Templates
{
    public class TemplateModel
    {
        public string NameSpace { get; set; }
        public string ContextNameSpace { get; set; }
        public string ContextRoute { get; set; }
        public List<TemplateEntityMetadata> EntityList { get; set; } = new();
    }

    public class StoredProcedureTemplateModel
    {
        public string NameSpace { get; set; }
        public string ContextNameSpace { get; set; }
        public string ContextRoute { get; set; }
        public List<StoredProcedureMetadata> ProcedureList { get; set; } = new();
    }

    public class TemplateEntityMetadata
    {
        public string Name { get; set; }
        public string PluralName { get; set; }
        public string KeyType { get; set; }
        public string KeyName { get; set; }
        public List<TemplateProperty> Properties { get; set; } = new();
    }

    public class StoredProcedureMetadata
    {
        public string Name { get; set; }
        public string CSName { get; set; }
        public string CSReturnSignature { get; set; }
        public string CSParameterSignature { get; set; }
        public string InlineParameters { get; set; }
        public bool HasOutput { get; set; }
        public bool HasParameters { get; set; }
        public List<TemplateProperty> Parameters { get; set; } = new();
        public List<TemplateProperty> OutputSet { get; set; } = new();
        public List<string> SummableOutputColumns { get; set; } = new();
    }

    public class TemplateProperty
    {
        public string Name { get; set; }
        public string CSName { get; set; }
        public string CSType { get; set; }
        public bool IsKey { get; set; }
        public bool IsRequired { get; set; }
        public bool IsAutoGenerated { get; set; }
        public string SqlParameterType { get; set; }
        
        public bool IsLinqToSqlSupportedType 
        {
            get
            {
                List<string> supportedTypes = new List<string>()
                {
                    "string",
                    "string?",
                    "int",
                    "int?",
                    "long",
                    "long?",
                    "decimal",
                    "decimal?",
                    "double",
                    "double?",
                    "bool",
                    "bool?",
                    "byte",
                    "byte?",
                    "sbyte",
                    "sbyte?",
                    "short",
                    "short?",
                    "ushort",
                    "ushort?",
                    "uint",
                    "uint?",
                    "ulong",
                    "ulong?",
                    "float",
                    "float?",
                    "double",
                    "double?",
                    "decimal",
                    "decimal?",
                    "DateTime",
                    "DateTime?",
                    "DateTimeOffset",
                    "DateTimeOffset?"
                };
                return supportedTypes.Contains(CSType);
            }
        }

        public bool IsForeignKey { get; set; }
        public bool IsEntityKey => IsKey && !IsForeignKey;
    }
} 