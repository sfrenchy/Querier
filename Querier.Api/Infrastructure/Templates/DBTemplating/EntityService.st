using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using System.Linq.Dynamic.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using $nameSpace$.DTOs;
using Querier.Api.Domain.Common.Attributes;
using Querier.Api.Application.Interfaces.Infrastructure;
using Querier.Api.Domain.Common.Models;
using Querier.Api.Common.Utilities;

namespace $nameSpace$.Services
{
    $entityList: {entity|
    #region $entity.Name$
    public interface I$entity.Name$Service : IDynamicContextEntityService
    {
        Task<DataPagedResult<$entity.Name$Dto>> GetAllAsync(DataRequestParametersDto? parameters = null);
        Task<$entity.Name$Dto?> GetByIdAsync($entity.KeyType$ id);
        Task<$entity.Name$Dto> CreateAsync(Create$entity.Name$Dto createDto);
        Task<$entity.Name$Dto?> UpdateAsync($entity.KeyType$ id, Update$entity.Name$Dto updateDto);
        Task<bool> DeleteAsync($entity.KeyType$ id);
        Task<List<string>> ColumnUniqueValuesAsync(string column);
    \}

    [DynamicContextEntity(ContextName="$nameSpace$", ServiceName="I$entity.Name$Service")]
    public class $entity.Name$Service : I$entity.Name$Service
    {
        private readonly IDbContextFactory<$contextNameSpace$> _contextFactory;
        private readonly ILogger<$entity.Name$Service> _logger;

        public $entity.Name$Service(
            IDbContextFactory<$contextNameSpace$> contextFactory,
            ILogger<$entity.Name$Service> logger)
        {
            _contextFactory = contextFactory;
            _logger = logger;
        \}

        private static $entity.Name$Dto MapToDto($entity.Name$ entity)
        {
            return new $entity.Name$Dto
            {
                $entity.Properties: {property|
                $property.Name$ = entity.$property.Name$,
                }$
            \};
        \}

        private static void MapToEntity(Create$entity.Name$Dto dto, $entity.Name$ entity)
        {
            $entity.Properties: {property|
            $if(!property.IsAutoGenerated)$
            entity.$property.Name$ = dto.$property.Name$;
            $endif$
            }$
        \}

        private static void UpdateEntity(Update$entity.Name$Dto dto, $entity.Name$ entity)
        {
            $entity.Properties: {property|
            $if(!property.IsKey)$
            if (dto.$property.Name$ != null)
                entity.$property.Name$ = dto.$property.Name$;
            $endif$
            }$
        \}

        public async Task<List<string>> ColumnUniqueValuesAsync(string column)
        {
            List<string> result = new List<string>(){\};
            await using (var context = await _contextFactory.CreateDbContextAsync())
            {
                
                switch(column)
                {
                    $entity.Properties: {property|
                    case "$property.Name$":
                    {
                        result.AddRange(await context.$entity.PluralName$
                            .Select(e => e.$property.Name$.ToString())
                            .Distinct()
                            .OrderBy(value => value)
                            .ToListAsync());
                        break;
                    \}
                    }$
                    default:
                        break;
                \}
            \}
            return result;
        \}
        
        public async Task<DataPagedResult<$entity.Name$Dto>> GetAllAsync(DataRequestParametersDto? parameters = null)
        {
            await using (var context = await _contextFactory.CreateDbContextAsync())
            {
                var query = context.$entity.PluralName$.AsQueryable();
                
                // Apply search filters
                if (!string.IsNullOrEmpty(parameters.GlobalSearch))
                {
                    _logger.LogDebug("Applying global search filter: {Search\}", parameters.GlobalSearch);
        
                    var searchTerm = parameters.GlobalSearch.ToLower();
        
                    query = query.Where(e =>
                            $entity.Properties: {property|
                            $if(property.IsLinqToSqlSupportedType)$
                            e.$property.Name$.ToString().ToLower().Contains(searchTerm) ||
                            $endif$
                            }$
                            false);
                \}
    
                // Apply column-specific searches
                if (parameters.ColumnSearches?.Any() == true)
                {
                    // Grouper les recherches par colonne
                    var groupedSearches = parameters.ColumnSearches
                        .GroupBy(cs => cs.Column)
                        .ToDictionary(g => g.Key, g => g.Select(cs => cs.Value.ToLower()).ToList());

                    foreach (var columnSearch in groupedSearches)
                    {
                        var columnName = columnSearch.Key;
                        var searchTerms = columnSearch.Value;
                
                        // Mappage explicite des colonnes
                        query = columnName switch
                        {
                            $entity.Properties: {property|
                            "$property.Name$" => query.Where(e => searchTerms.Any(term => e.$property.Name$.ToString().ToLower().Contains(term))),
                            }$
                            _ => query // Ignorer les colonnes inconnues
                        \};
                    \}
                \}
                
                var totalCount = await query.CountAsync();
                
                  // Apply sorting
                  if (parameters.OrderBy?.Any() == true)
                  {
                      _logger.LogDebug("Applying sorting");
                  
                      foreach (var orderBy in parameters.OrderBy)
                      {
                          string direction = orderBy.IsDescending ? "descending" : "ascending";
                          string column = orderBy.Column;
                          var sortExpression = column + " " + direction;
                  
                          query = query.OrderBy(sortExpression);
                      \}
                  \}
        
                _logger.LogDebug("Total count before pagination: {Count\}", totalCount);
        
                // Apply pagination
                var data = await query
                    .Skip(parameters.PageNumber != 0 ? (parameters.PageNumber - 1) * parameters.PageSize : 0)
                    .Take(parameters.PageNumber != 0 ? parameters.PageSize : totalCount)
                    .ToListAsync();
                    
                var result = new DataPagedResult<$entity.Name$>(data.ToList(), totalCount, parameters);
                
                return new DataPagedResult<$entity.Name$Dto>(
                                    result.Items.Select(MapToDto),
                                    result.Total,
                                    parameters
                                );
            \}
        \}

        public async Task<$entity.Name$Dto?> GetByIdAsync($entity.KeyType$ id)
        {
            using var context = await _contextFactory.CreateDbContextAsync();
            var entity = await context.$entity.PluralName$.FindAsync(id);
            return entity != null ? MapToDto(entity) : null;
        \}

        public async Task<$entity.Name$Dto> CreateAsync(Create$entity.Name$Dto createDto)
        {
            using var context = await _contextFactory.CreateDbContextAsync();
            var entity = new $entity.Name$();
            MapToEntity(createDto, entity);
            
            context.$entity.PluralName$.Add(entity);
            await context.SaveChangesAsync();
            
            return MapToDto(entity);
        \}

        public async Task<$entity.Name$Dto?> UpdateAsync($entity.KeyType$ id, Update$entity.Name$Dto updateDto)
        {
            using var context = await _contextFactory.CreateDbContextAsync();
            var entity = await context.$entity.PluralName$.FindAsync(id);
            
            if (entity == null)
                return null;

            UpdateEntity(updateDto, entity);
            await context.SaveChangesAsync();
            
            return MapToDto(entity);
        \}

        public async Task<bool> DeleteAsync($entity.KeyType$ id)
        {
            using var context = await _contextFactory.CreateDbContextAsync();
            var entity = await context.$entity.PluralName$.FindAsync(id);
            
            if (entity == null)
                return false;

            context.$entity.PluralName$.Remove(entity);
            await context.SaveChangesAsync();
            
            return true;
        \}
    \}
    #endregion
    }$
\} 